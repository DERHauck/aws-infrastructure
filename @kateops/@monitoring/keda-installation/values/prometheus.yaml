prometheus:
  metricServer:
    enabled: true
    port: 9022
    portName: metrics
    path: /metrics
    serviceMonitor:
      # Enables ServiceMonitor creation for the Prometheus Operator
      enabled: true
      jobLabel:
      targetLabels: []
      podTargetLabels: []
      port: metrics
      targetPort:
      interval:
      scrapeTimeout:
      relabellings: []
      additionalLabels:
        logging: grafana-agent
    podMonitor:
      # Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      interval:
      scrapeTimeout:
      namespace:
      additionalLabels: {}
      relabelings: []
  operator:
    enabled: false
    port: 8080
    serviceMonitor:
      # Enables ServiceMonitor creation for the Prometheus Operator
      enabled: false
      jobLabel:
      targetLabels: []
      podTargetLabels: []
      port: metrics
      targetPort:
      interval:
      scrapeTimeout:
      relabellings: []
      additionalLabels: {}
    podMonitor:
      # Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      interval:
      scrapeTimeout:
      namespace:
      additionalLabels: {}
      relabelings: []
    prometheusRules:
      # Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      namespace:
      additionalLabels: {}
      alerts:
        []
        # - alert: KedaScalerErrors
        #   annotations:
        #     description: Keda scaledObject {{ $labels.scaledObject }} is experiencing errors with {{ $labels.scaler }} scaler
        #     summary: Keda Scaler {{ $labels.scaler }} Errors
        #   expr: sum by ( scaledObject , scaler) (rate(keda_metrics_adapter_scaler_errors[2m]))  > 0
        #   for: 2m
      #   labels:
  webhooks:
    enabled: false
    port: 8080
    serviceMonitor:
      # Enables ServiceMonitor creation for the Prometheus webhooks
      enabled: false
      jobLabel:
      targetLabels: []
      podTargetLabels: []
      port: metrics
      targetPort:
      interval:
      scrapeTimeout:
      relabellings: []
      additionalLabels: {}
    prometheusRules:
      # Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      namespace:
      additionalLabels: {}
      alerts: []

certificates:
  autoGenerated: true
  secretName: kedaorg-certs
  mountPath: /certs
  certManager:
    enabled: false
    # If generateCA is false, the secret with the CA
    # has to be annotated with 'cert-manager.io/allow-direct-injection: "true"'
    generateCA: true
    caSecretName: "kedaorg-ca"
    # Add labels/annotations to secrets created by Certificate resources
    secretTemplate: {}
      # annotations:
      #   my-secret-annotation-1: "foo"
      #   my-secret-annotation-2: "bar"
      # labels:
    #   my-secret-label: foo