affinity: { }
args: [ ]
auth:
  #  adminPassword: ""
  adminUser: ${keycloak_admin_username}
  createAdminUser: false
  existingSecret: "keycloak"
  existingSecretPerPassword: { }
  #  managementPassword: ""
  managementUser: manager
  tls:
    autoGenerated: false
    enabled: false
    existingSecret: ""
    jksSecret: ""
    keystoreFilename: ""
    keystorePassword: ""
    resources:
      limits: { }
      requests: { }
    truststoreFilename: ""
    truststorePassword: ""
    usePem: false
autoscaling:
  enabled: false
  maxReplicas: 11
  minReplicas: 1
  targetCPU: ""
  targetMemory: ""
clusterDomain: cluster.local
command: [ ]
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: [ ]
    imageRegistry: ""
    storageClass: ""
commonAnnotations: { }
commonLabels: { }
configuration: ""
containerPorts:
  http: 8080
  https: 8443
  management: 9990
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: { }
customReadinessProbe: { }
customStartupProbe: { }
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
existingConfigmap: ""
externalDatabase:
  database: ${postgresql_database}
  existingSecret: "keycloak"
  existingSecretPasswordKey: "password"
  host: ${postgresql_host}
  port: ${postgresql_port}
  user: ${postgresql_username}
extraDeploy: [ ]
extraEnvVars: [ ]
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraStartupArgs: ""
extraVolumeMounts: [ ]
extraVolumes: [ ]
fullnameOverride: ""
global:
  imagePullSecrets: [ ]
  imageRegistry: ""
  storageClass: ""
hostAliases: [ ]
image:
  debug: true
  pullPolicy: IfNotPresent
  pullSecrets: [ ]
  registry: docker.io
  repository: bitnami/keycloak
  tag: 18.0.0-debian-10-r2
ingress:
  annotations:
    cert-manager.io/cluster-issuer: production
  apiVersion: ""
  enabled: enable
  extraHosts: [ ]
  extraPaths: [ ]
  extraRules: [ ]
  extraTls: [ ]
  hostname: sso.kateops.com
  ingressClassName: ""
  path: /
  pathType: Prefix
  secrets: [ ]
  selfSigned: false
  servicePort: http
  tls: true
initContainers: [ ]
initdbScripts: { }
initdbScriptsConfigMap: ""
keycloakConfigCli:
  annotations:
    helm.sh/hook: post-install,post-upgrade,post-rollback
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
    helm.sh/hook-weight: "5"
  args: [ ]
  backoffLimit: 1
  command: [ ]
  configuration: { }
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  enabled: false
  existingConfigmap: ""
  extraEnvVars: [ ]
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: [ ]
  extraVolumes: [ ]
  hostAliases: [ ]
  image:
    pullPolicy: IfNotPresent
    pullSecrets: [ ]
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 5.2.0-debian-10-r10
  podAnnotations: { }
  podLabels: { }
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  resources:
    limits: { }
    requests: { }
kubeVersion: ""
lifecycleHooks: { }
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 300
  periodSeconds: 1
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.ports.http }}'
      prometheus.io/scrape: "true"
    ports:
      http: 9990
  serviceMonitor:
    enabled: true
    honorLabels: false
    interval: 30s
    jobLabel: ""
    labels:
      logging: grafana-agent
    metricRelabelings: [ ]
    namespace: monitoring
    relabelings: [ ]
    scrapeTimeout: ""
    selector: { }
nameOverride: ""
networkPolicy:
  additionalRules: { }
  allowExternal: true
  enabled: false
nodeAffinityPreset:
  key: ""
  type: ""
  values: [ ]
nodeSelector: {}
pdb:
  create: false
  maxUnavailable: ""
  minAvailable: 1
podAffinityPreset: ""
podAnnotations: { }
podAntiAffinityPreset: soft
podLabels: { }
podManagementPolicy: Parallel
podSecurityContext:
  enabled: true
  fsGroup: 1001
postgresql:
  enabled: false
priorityClassName: ""
proxy: passthrough
rbac:
  create: false
  rules: [ ]
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
replicaCount: 1
resources:
  limits: { }
  requests: { }
schedulerName: ""
service:
  annotations: { }
  clusterIP: ""
  externalTrafficPolicy: Cluster
  extraPorts: [ ]
  loadBalancerIP: ""
  loadBalancerSourceRanges: [ ]
  nodePorts:
    http: ""
    https: ""
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  type: ClusterIP
serviceAccount:
  annotations: { }
  automountServiceAccountToken: true
  create: true
  name: ""
sidecars: [ ]
startupProbe:
  enabled: false
  failureThreshold: 60
  initialDelaySeconds: 30
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 1
terminationGracePeriodSeconds: ""
tolerations: [ ]
topologySpreadConstraints: { }
updateStrategy:
  rollingUpdate: { }
  type: RollingUpdate
