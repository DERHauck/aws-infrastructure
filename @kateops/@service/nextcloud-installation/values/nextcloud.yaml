
nextcloud:
  host: ${host_domain}
  # username: admin
  # password: changeme
  ## Use an existing secret
  existingSecret:
    enabled: true
    secretName: ${nextcloud_secret_name}
    usernameKey: ${usernameKey}
    passwordKey: ${passwordKey}
    tokenKey: ${tokenKey}
    smtpUsernameKey: ${smtpUsernameKey}
    smtpPasswordKey: ${smtpPasswordKey}
  update: 0
  # If web server is not binding default port, you can define it
  # containerPort: 8080
  datadir: /var/www/html/data
  persistence:
    subPath:
  configs:
    defaultOptions.config.php: |-
      <?php
      $CONFIG = array (
        'overwriteprotocol' => 'https',
        'default_phone_region' => 'DE',
        'loglevel' => 0,
        'overwritehost' => 'cloud.kateops.com',
        'trusted_proxies' => array (
          '10.0.0.0/8'
        ),
        'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR')
      );
    oidc.config.php: |-
      <?php
      $CONFIG = array (
        'allow_user_to_change_display_name' => false,
        'oidc_login_logout_url' => 'https://cloud.kateops.com',
        'oidc_login_provider_url' => 'https://sso.kateops.com/realms/master',
        'oidc_login_client_secret' => getenv('OIDC_SECRET'),
        'oidc_login_client_id' => getenv('OIDC_ID'),
        'oidc_login_button_text' => 'SSO Kateops',
        'oidc_login_auto_redirect' => false,
        'oidc_login_redir_fallback' => true,
        'oidc_login_end_session_redirect' => true,
        'oidc_login_disable_registration' => false,
        'oidc_login_attributes' => array(
          'id' => 'preferred_username',
          'mail' => 'email',
          'groups' => 'roles',
        )
      );
    s3.config.php: |-
      <?php
      $CONFIG = array (
      'objectstore' => array(
          'class' => '\\OC\\Files\\ObjectStore\\S3',
          'arguments' => array(
            'bucket'     => '${bucket_name}',
            'autocreate' => false,
            'hostname' => '${bucket_host}',
            'key'        => getenv('S3_ACCESS_KEY'),
            'secret'     => getenv('S3_SECRET_KEY'),
            'region'     => '${region}',
            'use_ssl'    => true,
            'port'       => 443,
            'use_path_style'=> false
          )
        )
      );
  # name: user
  # password: pass
  # PHP Configuration files
  # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
  # phpConfigs: {}
  # Default config files
  # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
  # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
  defaultConfigs:
    # To protect /var/www/html/config
    .htaccess: true
    # Redis default configuration
    redis.config.php: true
    # Apache configuration for rewrite urls
    apache-pretty-urls.config.php: true
    # Define APCu as local cache
    apcu.config.php: true
    # Apps directory configs
    apps.config.php: true
    # Used for auto configure database
    autoconfig.php: true
    # SMTP default configuration
    smtp.config.php: true
  # Extra config files created in /var/www/html/config/
  # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file

  # For example, to use S3 as primary storage
  # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
  #
  #  configs:

  ## Strategy used to replace old pods
  ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: Recreate
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0

  ##
  ## Extra environment variables
  extraEnv:
    - name: REDIS_HOST_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${redis_secret_name}
          key: ${redis_password}
    - name: REDIS_HOST
      valueFrom:
        secretKeyRef:
          name: ${redis_secret_name}
          key: ${redis_host}
    - name: REDIS_PORT
      valueFrom:
        secretKeyRef:
          name: ${redis_secret_name}
          key: ${redis_port}
    - name: PHP_UPLOAD_LIMIT
      value: '8G'
    - name: PHP_MEMORY_LIMIT
      value: '8G'
    - name: OIDC_SECRET
      valueFrom:
        secretKeyRef:
          name: ${oidc_secret_name}
          key: ${oidc_secret}
    - name: OIDC_ID
      valueFrom:
        secretKeyRef:
          name: ${oidc_secret_name}
          key: ${oidc_id}
    - name: S3_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: ${s3_secret_name}
          key: ${s3_secret}
    - name: S3_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: ${s3_secret_name}
          key: ${s3_access}
#    - name: POSTGRES_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: $${postgres_secret_name}
#          key: $${pq_password}

  # Extra init containers that runs before pods start.
  extraInitContainers: []
  #  - name: do-something
  #    image: busybox
  #    command: ['do', 'something']

  # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
  # to NextCloud pods in Kubernetes. This can then be configured in External Storage
  extraVolumes:
  #  - name: nfs
  #    nfs:
  #      server: "10.0.0.1"
  #      path: "/nextcloud_data"
  #      readOnly: false
  extraVolumeMounts:
  #  - name: nfs
  #    mountPath: "/legacy_data"

  # Extra secuurityContext parameters. For example you may need to define runAsNonRoot directive
  # extraSecurityContext:
  #   runAsUser: "33"
  #   runAsGroup: "33"
  #   runAsNonRoot: true
  #   readOnlyRootFilesystem: true
